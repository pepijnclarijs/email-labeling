name: Deploy Python Function App to Blob Storage using uv

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Define environment variables for clarity and reuse
      PYTHON_VERSION: '3.12' # Ensure this matches your Azure Function runtime version
      PACKAGE_DIR: '.python_packages' # Standard directory for pre-installed packages
      FUNCTION_APP_CODE_DIR: 'http_request' # Adjust if your function code is elsewhere
      DEPLOYMENT_ZIP_NAME: 'my-azure-function.zip' # Name of the zip file to create
      AZURE_STORAGE_ACCOUNT: 'emaillabelingstg' # Your Azure Storage account name
      AZURE_STORAGE_CONTAINER: 'functions' # Your Blob container name
      AZURE_BLOB_NAME: 'function.zip' # Name of the blob in Azure Storage
      REQUIREMENTS_FILE: 'requirements.txt'

    steps:
      # 1. Checkout the repository content
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up the specified Python version
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3. Install uv package manager
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      # 4. Install dependencies using uv into the required package directory
      # Azure Functions expect dependencies in .python_packages/lib/site-packages
      - name: Install dependencies with uv
        run: |
          # Add uv to the path (installation script usually does this, but belt-and-suspenders)
          source $HOME/.cargo/env

          # Install dependencies defined in pyproject.toml into the target directory
          uv pip install --target="${{ env.PACKAGE_DIR }}/lib/site-packages" .

      # 5. Create the deployment zip package
      # Include the code, dependencies folder, host.json, pyproject.toml, uv.lock etc.
      - name: Create deployment package
        run: |
          zip -r ${{ env.DEPLOYMENT_ZIP_NAME }} \
            ${{ env.PACKAGE_DIR }} \
            ${{ env.FUNCTION_APP_CODE_DIR }} \
            host.json \
            pyproject.toml \
            uv.lock # Include lock file for reference/reproducibility if desired
          # Add any other files/folders needed at the root level, e.g., proxies.json

      # 6. Log in to Azure using service principal credentials
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 7. Upload the zip package to Azure Blob Storage
      - name: Upload package to Azure Storage
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload \
              --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
              --container-name ${{ env.AZURE_STORAGE_CONTAINER }} \
              --name ${{ env.AZURE_BLOB_NAME }} \
              --file ${{ env.DEPLOYMENT_ZIP_NAME }} \
              --overwrite \
              --auth-mode login