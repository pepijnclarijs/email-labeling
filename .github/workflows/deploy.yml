name: Deploy Python Function App to Blob Storage using uv

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch
  workflow_dispatch: # Allow manual trigger from GitHub UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      # Define environment variables for clarity and reuse
      PYTHON_VERSION: '3.12' # Ensure this matches your Azure Function runtime version
      PACKAGE_DIR: '.python_packages' # Standard directory for pre-installed packages
      FUNCTION_APP_CODE_DIR: '.' # Adjust if your function code is elsewhere
      DEPLOYMENT_ZIP_NAME: 'my-azure-function.zip' # Name of the zip file to create
      AZURE_STORAGE_ACCOUNT: 'emaillabelingstg' # Your Azure Storage account name
      AZURE_RESOURCE_GROUP: 'email-labeling-rg' # Your Azure resource group name
      AZURE_FUNCTION_APP_NAME: 'peps-email-labeling-app' # Your Azure Function App name
      AZURE_STORAGE_CONTAINER: 'functions' # Your Blob container name
      AZURE_BLOB_NAME: 'function.zip' # Name of the blob in Azure Storage
      REQUIREMENTS_FILE: 'requirements.txt'

    steps:
      # 1. Checkout the repository content
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up the specified Python version
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # 3. Install dependencies using pip into the required package directory
      # Azure Functions expect dependencies in .python_packages/lib/site-packages
      - name: Install dependencies with pip
        run: |
          python -m pip install --upgrade pip
          python -m pip install --target="${{ env.PACKAGE_DIR }}/lib/site-packages" -r ${{ env.REQUIREMENTS_FILE }}

      # 5. Create the deployment zip package
      # Include the code, dependencies folder, host.json, pyproject.toml, uv.lock etc.
      - name: Create deployment package
        run: |
          # Create the deploy_dir where we will collect all the necessary files
          mkdir -p deploy_dir/azure_app
          
          # Copy core Azure Function files (adjust if you rename or relocate files)
          cp function_app.py deploy_dir/azure_app/
          cp host.json deploy_dir/azure_app/
          cp requirements.txt deploy_dir/azure_app/

          # Copy any shared modules (optional)
          cp handle_emails.py deploy_dir/azure_app/ || true

          # Create .python_packages directory and copy site-packages
          mkdir -p deploy_dir/azure_app/.python_packages/lib/site-packages
          cp -r ${{ env.PACKAGE_DIR }}/lib/site-packages/* deploy_dir/azure_app/.python_packages/lib/site-packages/

          # Zip from inside deploy_dir/azure_app to make the zip root correct
          cd deploy_dir/azure_app
          zip -r ../../${{ env.DEPLOYMENT_ZIP_NAME }} .
    

      # 6. Log in to Azure using service principal credentials
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # # 7. Upload the zip package to Azure Blob Storage
      # - name: Upload package to Azure Storage
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       az storage blob upload \
      #         --account-name ${{ env.AZURE_STORAGE_ACCOUNT }} \
      #         --container-name ${{ env.AZURE_STORAGE_CONTAINER }} \
      #         --name ${{ env.AZURE_BLOB_NAME }} \
      #         --file ${{ env.DEPLOYMENT_ZIP_NAME }} \
      #         --overwrite \
      #         --auth-mode login

      # 7. Deploy the zip package to the Azure Function App using Zip Deploy
      - name: Deploy Azure Function via Zip Deploy
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az functionapp deployment source config-zip \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.AZURE_FUNCTION_APP_NAME }} \
              --src ${{ env.DEPLOYMENT_ZIP_NAME }}
  